/**
 * This class file was automatically generated by jASN1 v1.8.2 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.modules.module2;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class TestChoice implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private BerInteger element1 = null;
	private BerInteger element2 = null;
	
	public TestChoice() {
	}

	public TestChoice(byte[] code) {
		this.code = code;
	}

	public void setElement1(BerInteger element1) {
		this.element1 = element1;
	}

	public BerInteger getElement1() {
		return element1;
	}

	public void setElement2(BerInteger element2) {
		this.element2 = element2;
	}

	public BerInteger getElement2() {
		return element2;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (element2 != null) {
			codeLength += element2.encode(os, true);
			return codeLength;
		}
		
		if (element1 != null) {
			codeLength += element1.encode(os, true);
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerInteger.tag)) {
			element1 = new BerInteger();
			codeLength += element1.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerInteger.tag)) {
			element2 = new BerInteger();
			codeLength += element2.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		OutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = ((BerByteArrayOutputStream) os).getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (element1 != null) {
			sb.append("element1: ").append(element1);
			return;
		}

		if (element2 != null) {
			sb.append("element2: ").append(element2);
			return;
		}

		sb.append("<none>");
	}

}

